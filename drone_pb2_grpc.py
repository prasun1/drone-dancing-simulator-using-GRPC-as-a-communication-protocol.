# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import drone_pb2 as drone__pb2


class PingPongStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.retrievePosition = channel.unary_unary(
        '/PingPong/retrievePosition',
        request_serializer=drone__pb2.Request.SerializeToString,
        response_deserializer=drone__pb2.Response.FromString,
        )
    self.retrieveID = channel.unary_unary(
        '/PingPong/retrieveID',
        request_serializer=drone__pb2.Request.SerializeToString,
        response_deserializer=drone__pb2.Response.FromString,
        )


class PingPongServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def retrievePosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def retrieveID(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PingPongServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'retrievePosition': grpc.unary_unary_rpc_method_handler(
          servicer.retrievePosition,
          request_deserializer=drone__pb2.Request.FromString,
          response_serializer=drone__pb2.Response.SerializeToString,
      ),
      'retrieveID': grpc.unary_unary_rpc_method_handler(
          servicer.retrieveID,
          request_deserializer=drone__pb2.Request.FromString,
          response_serializer=drone__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PingPong', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
